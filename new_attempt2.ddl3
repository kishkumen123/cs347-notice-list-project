DROP SEQUENCE Active_employees_seq ; 
create sequence Active_employees_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Active_employees_PK_trig 
before insert on Active_employees
for each row 
begin 
select Active_employees_seq.nextval into :new.employee_id from dual; 
end; 
/
alter table Active_employees add created date ; 
alter table Active_employees add created_by VARCHAR2 (255) ; 
alter table Active_employees add row_version_number integer ; 
alter table Active_employees add updated date ; 
alter table Active_employees add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Active_employees_AUD_trig 
before insert or update on Active_employees 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE Division_seq ; 
create sequence Division_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Division_PK_trig 
before insert on Division
for each row 
begin 
select Division_seq.nextval into :new.division_id from dual; 
end; 
/
alter table Division add created date ; 
alter table Division add created_by VARCHAR2 (255) ; 
alter table Division add row_version_number integer ; 
alter table Division add updated date ; 
alter table Division add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Division_AUD_trig 
before insert or update on Division 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE Lab_seq ; 
create sequence Lab_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Lab_PK_trig 
before insert on Lab
for each row 
begin 
select Lab_seq.nextval into :new.lab_id from dual; 
end; 
/
alter table Lab add created date ; 
alter table Lab add created_by VARCHAR2 (255) ; 
alter table Lab add row_version_number integer ; 
alter table Lab add updated date ; 
alter table Lab add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Lab_AUD_trig 
before insert or update on Lab 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE Members_seq ; 
create sequence Members_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Members_PK_trig 
before insert on Members
for each row 
begin 
select Members_seq.nextval into :new.list_seq_id from dual; 
end; 
/
alter table Members add created date ; 
alter table Members add created_by VARCHAR2 (255) ; 
alter table Members add row_version_number integer ; 
alter table Members add updated date ; 
alter table Members add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Members_AUD_trig 
before insert or update on Members 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE Notice_lists_seq ; 
create sequence Notice_lists_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger Notice_lists_PK_trig 
before insert on Notice_lists
for each row 
begin 
select Notice_lists_seq.nextval into :new.notice_list_id from dual; 
end; 
/
alter table Notice_lists add created date ; 
alter table Notice_lists add created_by VARCHAR2 (255) ; 
alter table Notice_lists add row_version_number integer ; 
alter table Notice_lists add updated date ; 
alter table Notice_lists add updated_by VARCHAR2 (255) ; 
/
create or replace trigger Notice_lists_AUD_trig 
before insert or update on Notice_lists 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP INDEX Lab_lab_id_FK_0 ;
CREATE INDEX Lab_lab_id_FK_0 ON Division(Lab_lab_id) ;
DROP INDEX Active_employees_emplo_FK_1 ;
CREATE INDEX Active_employees_emplo_FK_1 ON Members(Active_employees_employee_id) ;
DROP INDEX Notice_lists_notice_li_FK_2 ;
CREATE INDEX Notice_lists_notice_li_FK_2 ON Members(Notice_lists_notice_list_id) ;
DROP INDEX Notice_lists_notice_li_FK_3 ;
CREATE INDEX Notice_lists_notice_li_FK_3 ON Members(Notice_lists_notice_list_id1) ;
